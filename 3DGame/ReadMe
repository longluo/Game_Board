

这是一个定点数学运算的ray casting的demo，运行于lm3s8962处理器（ekk-lm3s8962 开发板）

什么是ray casting？
这是一个从Wolfenstein 3-D开始为大家所熟悉，从doom开始让大家疯狂的3d实现算法
wiki的介绍：
http://en.wikipedia.org/wiki/Ray_casting

本程序包参考了互联网上sofaking的基于x86的程序
(http://www.cpplc.net/forum/index.php?topic=2631.0)
以及伟大的人人都该读的ray casting教程（http://www.permadi.com/tutorial/raycast/index.html），
顺便的，借用了卡马克大神开源的Wolfenstein 3-D的材质~

要成功编译本程序，请首先去官方下载SW-EK-LM3S8962-6075.exe
请使用mdk4 来打开工程并且编译,会有3个warning,请无视,没关系的.然后直接下载就ok拉

方向键上就是往前走,左就是左转,右就是右转.
现在的版本已经做了碰撞检测了,不会穿墙了~
不过因为sprite的处理程序还没有写,目前没有敌人,
哈哈,你只能走迷宫....
键盘处理的函数非常粗糙，晚上随便写的，并且是针对32*32大小的地图搞得，
如果你要用不同的尺寸的地图，请自己检查下，哈哈。

如何自己玩：
这个程序在sram中开了一个完整的帧缓存，render更新完后，再update到oled。所以~你可以写个无完整缓存版的，可能可以提高点效率。
因为oled的内存模式，你需要2列2列的更新。。。。

材质与地图
你可以自己写材质文件,用小俊的那个字模软件.输入的图片请使用64*64那么大的,先自己用画图板逆时针旋转90度然后上下翻转一下,
然后用字模软件取16bit灰度的模就ok了(之所以这样是为了读材质的时候方便....)

总共有2个指针数组来储存材质,一个专门储存平行于地图x轴的材质列表,一个储存平行于y的.你导入了自己的材质后,
把他们的指针update到这两个数组就ok了.这两个数组的指针是map_t结构类型的成员uint8_t **ppucTexListH; uint8_t **ppucTexListV;
map_t的其他成员还包括了一个指向地图数组的指针uint8_t   *pucMap，创建map_t的实例以后，把它指向那个储存了地图的数组就ok了。
在这里默认255为可以行走的空地。地图数组里的标号就对应了2个材质列表中的材质编号了~
剩下的就是地图的高度和宽度了~现在用的都是32格。每一格的尺寸等于材质的尺寸，64点。

map数组我其实也是用字模软件做的，在画图板里画个32*32的图片，转换下就ok了，也很方便。。。。

剩下的还有一个render_t结构，制定了render的摄像机位置和摄像机角度~在这里需要注意的是，我的fov是64度，
所以一个column的度数就是0.5度为了计算方便，我使用了一个720度=1个圆周的角度体系 ，所以一个合法的输入角度是0~719度~输入其他的角度，
后果自负，哈哈

如果你想移植这个程序，你需要重新写的是fix point的三角查表函数以适用你的fov的角度划分，然后更新一些define，重写DrawColumnWall 函数，
如果你想移植到stm32，我觉得只需要开一个列缓存，然后刷一列，直接DMA到FMSC上的LCD，这样效率高很多。。。。

下一步准备把sprite的处理给搞定，这样就可以真正写一个可以玩得游戏咯~

